---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# EditorConfig is awesome: https://EditorConfig.org

# Top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

# C# files
[*.cs]

# File organization
file_header_template = unset

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Naming conventions
# Interfaces should start with I
dotnet_naming_rule.interface_should_begin_with_i.severity = error
dotnet_naming_rule.interface_should_begin_with_i.symbols = interface
dotnet_naming_rule.interface_should_begin_with_i.style = begins_with_i

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.capitalization = pascal_case

# Services organization
# Services should end with Service
dotnet_naming_rule.service_should_end_with_service.severity = error
dotnet_naming_rule.service_should_end_with_service.symbols = service
dotnet_naming_rule.service_should_end_with_service.style = ends_with_service

dotnet_naming_symbols.service.applicable_kinds = class
dotnet_naming_symbols.service.applicable_accessibilities = public
dotnet_naming_style.ends_with_service.required_suffix = Service
dotnet_naming_style.ends_with_service.capitalization = pascal_case

# Commands should end with Command
dotnet_naming_rule.command_should_end_with_command.severity = error
dotnet_naming_rule.command_should_end_with_command.symbols = command
dotnet_naming_rule.command_should_end_with_command.style = ends_with_command

dotnet_naming_symbols.command.applicable_kinds = class
dotnet_naming_symbols.command.applicable_accessibilities = public
dotnet_naming_style.ends_with_command.required_suffix = Command
dotnet_naming_style.ends_with_command.capitalization = pascal_case

# Handlers should end with Handler
dotnet_naming_rule.handler_should_end_with_handler.severity = error
dotnet_naming_rule.handler_should_end_with_handler.symbols = handler
dotnet_naming_rule.handler_should_end_with_handler.style = ends_with_handler

dotnet_naming_symbols.handler.applicable_kinds = class
dotnet_naming_symbols.handler.applicable_accessibilities = public
dotnet_naming_style.ends_with_handler.required_suffix = Handler
dotnet_naming_style.ends_with_handler.capitalization = pascal_case

# File structure organization
# Place System.* using directives first
dotnet_style_namespace_match_folder = true:suggestion

# Suggested file structure:
# - Commands/
#   - {Feature}Command.cs
#   - {Feature}CommandHandler.cs
# - Queries/
#   - {Feature}Query.cs
#   - {Feature}QueryHandler.cs
# - Services/
#   - {Feature}Service.cs
#   - I{Feature}Service.cs
# - Models/
#   - {Feature}Model.cs
# - Validators/
#   - {Feature}Validator.cs

# Code style rules
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# Folder structure conventions
# src/
#   Services/
#       Estore.Application/
#         Commands/
#           {Feature}/
#               {EndPointName}Request.cs
#               {EndPointName}Response.cs
#               {EndPointName}Command.cs
#               {EndPointName}Validator.cs
#               {EndPointName}Handler.cs
#         Queries/
#           {Feature}/
#               {EndPointName}Request.cs
#               {EndPointName}Response.cs
#               {EndPointName}Query.cs
#               {EndPointName}Validator.cs
#               {EndPointName}Handler.cs
#         Services/
#         Helpers/
#         Constants/
#         Validators/
#         DesignPatterns/
#       Estore.Domain/
#         Abstractions/
#         Enums/
#         Extensions/
#         Models/
#         Events/
#         ValueObjects/
#       Estore.Infrastructure/
#         Configurations/
#         Data/
#            Extensions/
#            Interceptors/            
#         Services/
#         Repositories/
#       Estore.Api/
#         Endpoints/
#           {Feature}/
#               Commands/
#               Queries/
#         Middleware/
#         Extensions/
# File naming conventions
# - Commands: {Action}{Entity}Command.cs
# - Queries: {Action}{Entity}Query.cs
# - Services: {Feature}Service.cs
# - Interfaces: I{Feature}Service.cs
# - Models: {Feature}.cs
# - Validators: {Feature}Validator.cs